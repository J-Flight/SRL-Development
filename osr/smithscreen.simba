{$DEFINE SRL_SMITHSCREEN_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSSmithScreenButton = (
    QUANTITY_1,
    QUANTITY_5,
    QUANTITY_10,
    QUANTITY_CUSTOM,
    QUANTITY_ALL
  );

  TRSSmithScreen = type TRSTitledInteface;

procedure TRSSmithScreen.Setup; override;
begin
  inherited;

  Self.Name := 'Smithing Screen';
end;

procedure TRSSmithScreen.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 500;
        Self.Alignment.Center.MaxHeight := 320;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 500;
        Self.Alignment.Center.MaxHeight := 320;
      end;
  end;
end;

function TRSSmithScreen.GetButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[37,37]]);
end;

function TRSSmithScreen.GetButton(Button: ERSSmithScreenButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if (Length(Buttons) = Length(ERSSmithScreenButton)) then
    Result := Buttons[Button];
end;

function TRSSmithScreen.GetItemBoxes: TBoxArray;
begin
  Result := Grid(5, 5, 77, 42, [2, 13], [Self.X1 + 10, Self.Y1 + 36]);
end;

function TRSSmithScreen.IsOpen: Boolean; overload;
begin
  Result := Self.GetButton(ERSSmithScreenButton.QUANTITY_1).Visible();
end;

function TRSSmithScreen.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

function TRSSmithScreen.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSSmithScreen.SetQuantity(Amount: Int32): Boolean;
const
  ENABLED_COLOR = $FFFFFF;
  DISABLED_COLOR = 2070783;
var
  Text: String;
  Button: TRSButton;
  Buttons: TRSButtonArray;
begin
  if Amount = MAKE_QUANTITY_ALL then
    Text := 'All'
  else
    Text := ToString(Amount);

  Buttons := Self.GetButtons();

  for Button in Buttons do
  begin
    // Already selected
    if Button.FindText(Text, RS_FONT_PLAIN_11, ENABLED_COLOR) then
      Exit(True);
    // Select
    if Button.FindText(Text, RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click());
  end;

  for Button in Buttons do
    if Button.FindText('X', RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click() and Chat.AnswerQuery('Enter amount', ToString(Amount), 3000));
end;

function TRSSmithScreen.CanSmithItem(Item: TRSItem; out ItemBox: TBox): Boolean;
const
  WHITE_COLOR = $FFFFFF;
var
  Boxes: TBoxArray;
  TPA: TPointArray;
  Indices: TIntegerArray;
begin
  if not Self.IsOpen() then Exit;
  Boxes := Self.GetItemBoxes();

  Indices := ItemFinder.Find(Item, Boxes, 1);
  if Indices.Len < 1 then Exit;

  ItemBox := Boxes[Indices[0]];
  Result := SRL.FindColors(TPA, WHITE_COLOR, ItemBox) > 0;
end;

function TRSSmithScreen.ClickItem(Item: TRSItem; Quantity: Int32): Boolean;
var
  Box: TBox;
begin
  if not Self.CanSmithItem(Item, Box) then Exit;

  Self.SetQuantity(Quantity);
  Mouse.Move(Box);
  Mouse.Click(MOUSE_LEFT);
  Result := True;
end;

procedure TRSSmithScreen.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxes(GetItemBoxes(), $00FFFF);
end;

var
  SmithScreen: TRSSmithScreen;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  SmithScreen.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  SmithScreen.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  SmithScreen.Draw(Bitmap);
end;
