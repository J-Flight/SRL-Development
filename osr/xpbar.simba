{$DEFINE SRL_XPBAR_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSXPBarLocation = (LEFT, MIDDLE, RIGHT);
  ERSXPBarSize = (SMALL, MEDIUM, LARGE);

  TRSXPBar = record(TRSInterface)
    Alignments: array[ERSXPBarLocation] of array[ERSXPBarSize] of TRSInterfaceAlignment;
    Font: TFontSet;
  end;

procedure TRSXPBar.Setup; override;
begin
  inherited;

  Self.Name := 'XPBar';

  // Small Text
  with Self.Alignments[ERSXPBarLocation.LEFT][ERSXPBarSize.SMALL] do
  begin
    Left := [@InterfaceArea.X1, 2];
    Right := [@InterfaceArea.X1, 120];
    Top := [@InterfaceArea.Y1, 23];
    Bottom := [@InterfaceArea.Y1, 51];
  end;

  with Self.Alignments[ERSXPBarLocation.MIDDLE][ERSXPBarSize.SMALL] do
  begin
    Left   := [@InterfaceArea.X1];
    Right  := [@InterfaceArea.X2];
    Top    := [@InterfaceArea.Y1, 23];
    Bottom := [@InterfaceArea.Y1, 51];
    Center.MaxWidth := 119;
  end;

  with Self.Alignments[ERSXPBarLocation.RIGHT][ERSXPBarSize.SMALL] do
  begin
    Left := [@InterfaceArea.X2, -120];
    Right := [@InterfaceArea.X2, -2];
    Top := [@InterfaceArea.Y1, 0];
    Bottom := [@InterfaceArea.Y1, 28];
  end;

  // Medium Text
  with Self.Alignments[ERSXPBarLocation.LEFT][ERSXPBarSize.MEDIUM] do
  begin
    Left := [@InterfaceArea.X1, 2];
    Right := [@InterfaceArea.X1, 130];
    Top := [@InterfaceArea.Y1, 23];
    Bottom := [@InterfaceArea.Y1, 51];
  end;

  with Self.Alignments[ERSXPBarLocation.MIDDLE][ERSXPBarSize.MEDIUM] do
  begin
    Left   := [@InterfaceArea.X1];
    Right  := [@InterfaceArea.X2];
    Top    := [@InterfaceArea.Y1, 23];
    Bottom := [@InterfaceArea.Y1, 51];
    Center.MaxWidth := 129;
  end;

  with Self.Alignments[ERSXPBarLocation.RIGHT][ERSXPBarSize.MEDIUM] do
  begin
    Left := [@InterfaceArea.X2, -130];
    Right := [@InterfaceArea.X2, -2];
    Top := [@InterfaceArea.Y1, 0];
    Bottom := [@InterfaceArea.Y1, 28];
  end;

  // Large Text
  with Self.Alignments[ERSXPBarLocation.LEFT][ERSXPBarSize.LARGE] do
  begin
    Left := [@InterfaceArea.X1, 2];
    Right := [@InterfaceArea.X1, 141];
    Top := [@InterfaceArea.Y1, 23];
    Bottom := [@InterfaceArea.Y1, 51];
  end;

  with Self.Alignments[ERSXPBarLocation.MIDDLE][ERSXPBarSize.LARGE] do
  begin
    Left   := [@InterfaceArea.X1];
    Right  := [@InterfaceArea.X2];
    Top    := [@InterfaceArea.Y1, 23];
    Bottom := [@InterfaceArea.Y1, 51];
    Center.MaxWidth := 140;
  end;

  with Self.Alignments[ERSXPBarLocation.RIGHT][ERSXPBarSize.LARGE] do
  begin
    Left := [@InterfaceArea.X2, -141];
    Right := [@InterfaceArea.X2, -2];
    Top := [@InterfaceArea.Y1, 0];
    Bottom := [@InterfaceArea.Y1, 28];
  end;
end;

procedure TRSXPBar.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  // Default location & size
  Self.Alignment := Self.Alignments[ERSXPBarLocation.RIGHT][ERSXPBarSize.SMALL];
  Self.Font := RS_FONT_PLAIN_11;
end;

function TRSXPBar.IsOpen: Boolean;

  function FindBorder: Boolean;
  const
    COLOR_BORDER = $233038;
  var C: Int32;
  begin
    C := SRL.CountColor(COLOR_BORDER, Self.Bounds);
    case Self.Width of   // With / without progress bar
{Smallest} 119: Result := (C = 292) or (C = 175);
{Medium}   129: Result := (C = 312) or (C = 185);
{Large}    140: Result := (C = 334) or (C = 196);
    end;
  end;

  function UpdateLocation: Boolean;
  var
    Location: ERSXPBarLocation;
    Size: ERSXPBarSize;
  begin
    for Location in ERSXPBarLocation do
      for Size in ERSXPBarSize do
      begin
        Self.Cache := [];
        Self.Alignment := Self.Alignments[Location][Size];
        if FindBorder() then
        begin
          case Size of
            ERSXPBarSize.SMALL:  Self.Font := RS_FONT_PLAIN_11;
            ERSXPBarSize.MEDIUM: Self.Font := RS_FONT_PLAIN_12;
            ERSXPBarSize.LARGE:  Self.Font := RS_FONT_BOLD_12;
          end;

          Exit(True);
        end;
      end;
  end;

begin
  Result := FindBorder() or UpdateLocation();
end;

function TRSXPBar.Open: Boolean;
begin
  if Self.IsOpen then
    Exit(True);

  Mouse.Click(Minimap.GetXPCircle(), MOUSE_LEFT);

  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(100, 1000), 3000);
end;

procedure TRSXPBar.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;
end;

function TRSXPBar.Read: Int32;
begin
  Result := -1;

  if Self.IsOpen() then
    Result := OCR.RecognizeNumber(Self.Bounds, TOCRColorRule.Create([$FFFFFF]), Self.Font);
end;

var
  XPBar: TRSXPBar;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  XPBar.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  XPBar.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  XPBar.Draw(Bitmap);
end;
