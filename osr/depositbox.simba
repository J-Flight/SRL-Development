{$DEFINE SRL_DEPOSITBOX_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

const
  DEPOSITBOX_DEPOSIT_ALL  = -1;

type
  ERSDepositButton = (
    QUANTITY_1,
    QUANTITY_5,
    QUANTITY_10,
    QUANTITY_CUSTOM,
    QUANTITY_ALL,
    
    DEPOSIT_INVENTORY,
    DEPOSIT_WORN,
    DEPOSIT_LOOT
  );

type
  TRSDepositBoxItem = record
    Item: TRSItem;
    Quantity: Int32;
  end;

  TRSDepositBox = type TRSTitledInteface;

procedure TRSDepositBox.Setup; override;
begin
  inherited;

  Self.Name := 'Deposit Screen';
end;

procedure TRSDepositBox.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 452;
        Self.Alignment.Center.MaxHeight := 276;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 452;
        Self.Alignment.Center.MaxHeight := 276;
      end;
  end;
end;

function TRSDepositBox.GetButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[34,34]]);
end;

function TRSDepositBox.GetButton(Button: ERSDepositButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if (Length(Buttons) = Length(ERSDepositButton)) then
    Result := Buttons[Button];
end;

function TRSDepositBox.GetSlotBoxes: TBoxArray; 
begin
  Result := Grid(7, 4, 31, 31, [25, 17], [Self.X1 + 38, Self.Y1 + 42]);
end;

function TRSDepositBox.IsOpen: Boolean; overload;
begin
  Result := Self.GetButton(ERSDepositButton.QUANTITY_1).Visible();
end;

function TRSDepositBox.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

function TRSDepositBox.Close(PressEscape: Boolean = False): Boolean; 
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSDepositBox.IsCustomQuantity(Quantity: Int32): Boolean;
begin
  Result := not (Quantity in [1,5,10,DEPOSITBOX_DEPOSIT_ALL]);
end;

function TRSDepositBox.FindItem(Item: TRSItem; out Bounds: TBox): Boolean;
var
  Boxes: TBoxArray;
  Indices: TIntegerArray;
begin
  if not Self.IsOpen() then
    Exit;

  Boxes := Self.GetSlotBoxes();
  Indices := ItemFinder.Find(Item, Boxes, 1);
  if Result := Indices <> [] then
    Bounds := Boxes[Indices[0]];
end;

//overload to not require passing a TBox.
function TRSDepositBox.FindItem(Item: TRSItem): Boolean; overload;
var
  B: TBox;
begin
  Result := Self.FindItem(Item, B);
end;

(*
TRSDepositBox.CountSlots
~~~~~~~~~~
.. pascal:: function TRSDepositBox.CountSlots(): Int32;

Counts the total number of individual items in the depositbox

.. note:: This is automatically called on the **Bank** variable.
*)
function TRSDepositBox.CountSlots(): Int32;
var
  Box: TBox;
  Pt: TPoint;
  TPA: TPointArray;
begin
  if not Self.IsOpen() then
    Exit;

  if SRL.FindColors(TPA, RS_ITEM_BORDER, Self.Bounds) > 0 then
    for Box in Self.GetSlotBoxes() do
      for Pt in TPA do
        if Pt.InBox(Box) then
        begin
          Inc(Result);
          break;
        end;
end;

function TRSDepositBox.CountItem(Item: TRSItem): Int32;
begin
  if not Self.IsOpen() then
    Exit;

  Result := Length(ItemFinder.Find(Item, Self.GetSlotBoxes()));
end;

function TRSDepositBox.CountItemStack(Item: TRSItem): Int32;
var
  B: TBox;
begin
  Result := -1;
  if Self.FindItem(Item, B) then
    Result := SRL.GetItemAmount(B);
end;

function TRSDepositBox.HoverItem(Item: TRSItem): Boolean;
var
  B: TBox;
begin
  Result := Self.FindItem(Item, B);
  if Result then
    Mouse.Move(B);
end;

function TRSDepositBox.ClickItem(Item: TRSItem; Option: String = ''): Boolean;
begin
  if Self.HoverItem(Item) then
  begin
    if Option <> '' then
      Result := ChooseOption.Select(Option)
    else
    begin
      Mouse.Click(MOUSE_LEFT);

      Result := True;
    end;
  end;
end;

function TRSDepositBox.DepositHelper(B: TBox; Amount: Int32; UseQuantityButtons: Boolean): Boolean;
var
  Button: TRSButton;
begin
  if UseQuantityButtons then
  begin
    if Self.IsCustomQuantity(Amount) then
    begin
      Button := Self.GetButton(ERSDepositButton.QUANTITY_CUSTOM);

      if Button.Enable() then
      begin
        Mouse.Move(B);

        if MainScreen.IsUpText('Deposit-' + ToString(Amount)) then
        begin
          Mouse.Click(MOUSE_LEFT);

          Result := True;
        end else
          Result := ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
      end;
    end else
    begin
      case Amount of
        1:  Button := Self.GetButton(ERSDepositButton.QUANTITY_1);
        5:  Button := Self.GetButton(ERSDepositButton.QUANTITY_5);
        10: Button := Self.GetButton(ERSDepositButton.QUANTITY_10);
        else
            Button := Self.GetButton(ERSDepositButton.QUANTITY_ALL)
      end;

      if Button.Enable() then
      begin
        Result := True;

        Mouse.Click(B, MOUSE_LEFT);
      end;
    end;
  end else
  begin
    Mouse.Move(B);

    if (Amount = DEPOSITBOX_DEPOSIT_ALL) then
      Result := ChooseOption.Select('Deposit-All')
    else
      Result := ChooseOption.Select('Deposit-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False) or
                ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
  end;
end;

function TRSDepositBox.DepositItem(Item: TRSDepositBoxItem; UseQuantityButtons: Boolean): Boolean;
var
  Box: TBox;
begin
  if Self.FindItem(Item.Item, Box) then
    Result := Self.DepositHelper(Box, Item.Quantity, UseQuantityButtons);
end;

function TRSDepositBox.DepositAll: Boolean;
begin
  Result := (Self.CountSlots() = 0) or Self.GetButton(ERSDepositButton.DEPOSIT_INVENTORY).Click(); 
end;

procedure TRSDepositBox.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxes(GetSlotBoxes(), $00FFFF);
end;

var
  DepositBox: TRSDepositBox;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  DepositBox.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  DepositBox.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  DepositBox.Draw(Bitmap);
end;
