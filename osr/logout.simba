{$DEFINE SRL_LOGOUT_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSLogoutButton = (
    WORLD_SWITCHER,
    CLICK_HERE
  );
  
  ERSWorldSwitcherButton = (
    CLOSE
  );

  TRSLogout = type TRSInterface;

procedure TRSLogout.Setup; override;
begin
  inherited;
  
  Self.Name := 'Logout';
end;

procedure TRSLogout.SetupAlignment(Mode: ERSClientMode); override;
begin 
  inherited;
  
  Self.Alignment.Left := [@GameTab.X1, -3];
  Self.Alignment.Right := [@GameTab.X2, 3];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

function TRSLogout.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.LOGOUT);
end;

function TRSLogout.Open: Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.LOGOUT);
end;

function TRSLogout.GetButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[138, 30], [21, 21]]);
end;

function TRSLogout.GetButton(Button: ERSLogoutButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if Length(Buttons) = Length(ERSLogoutButton) then
    Result := Buttons[Button];
end;

function TRSLogout.GetWorldSwitcherButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[21, 21]]);
end;

function TRSLogout.GetWorldSwitcherButton(Button: ERSWorldSwitcherButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetWorldSwitcherButtons();
begin
  if Length(Buttons) = Length(ERSWorldSwitcherButton) then
    Result := Buttons[Button];
end;

function TRSLogout.IsWorldSwitcherOpen: Boolean;
begin
  Self.Open();
  Result := Self.IsOpen() and Self.GetWorldSwitcherButton(ERSWorldSwitcherButton.CLOSE).Visible();
end;

function TRSLogout.OpenWorldSwitcher: Boolean;
begin
  if Self.IsWorldSwitcherOpen() then Exit(True);

  if Self.GetButton(ERSLogoutButton.WORLD_SWITCHER).Click() and WaitUntil(Self.IsWorldSwitcherOpen(), 500, 5000 + SRL.NormalRange(-2000, 2000)) then
    Exit(True);
end;

function TRSLogout.CloseWorldSwitcher: Boolean;
begin
  if Self.IsOpen() and (not Self.IsWorldSwitcherOpen()) then
    Exit(True);
  
  Result := Self.GetWorldSwitcherButton(ERSWorldSwitcherButton.CLOSE).Click() and WaitUntil(not Self.IsWorldSwitcherOpen(), 500, 5000);
end;

function TRSLogout.GetCurrentWorld: Int32;
begin
  Self.OpenWorldSwitcher();
  Result := OCR.RecognizeNumber([Self.Bounds.X1+17,Self.Bounds.Y1,Self.Bounds.X1+150,Self.Bounds.Y1+20], TOCRColorRule.Create([2070783]), RS_FONT_BOLD_12);
end;

function TRSLogout.SwitchWorlds(World:Int32): Boolean;
var
  B: TBox;
  ListBox: TBox := [Self.Bounds.X1+17,Self.Bounds.Y1+36,Self.Bounds.X1+42,Self.Bounds.Y2-38];
  VisibleWorld: Int32;
begin
  if (Self.GetCurrentWorld = World) then Exit(True);

  // Read the first visible members world from the world list
  VisibleWorld := OCR.RecognizeNumber(ListBox, TOCRColorRule.Create([61680]), RS_FONT_PLAIN_12);
  Mouse.Move(Self.Bounds, True);

  if World > VisibleWorld then
  begin
    While (OCR.LocateText(ListBox, ToStr(World), RS_FONT_PLAIN_12,  TOCRColorRule.Create([61680]), B) < 1) do
      Mouse.Scroll(1, True);
  end else
  begin
    While (OCR.LocateText(ListBox, ToStr(World), RS_FONT_PLAIN_12,  TOCRColorRule.Create([61680]), B) < 1) do
      Mouse.Scroll(1, False);
  end;

  if B.X1 < 1 then Exit;
  Mouse.Click(B, MOUSE_LEFT);
  Result := WaitUntil((Self.GetCurrentWorld = World), 75, 15000);
end;

function TRSLogout.ClickLogout(Attempts: Int32 = 5; TryTime: Int32 = 20000): Boolean;
var
  Interval: UInt64;
begin
  if (not Self.Open()) or (not Self.CloseWorldSwitcher()) then
    Exit;

  Interval := TryTime div Attempts;

  for 1 to Attempts do
    if Self.GetButton(ERSLogoutButton.CLICK_HERE).Click() and WaitUntil(not RSClient.IsLoggedIn(), 500, Interval + SRL.NormalRange(-2000, 2000)) then 
      Exit(True);
end;

var
  Logout: TRSLogout;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Logout.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Logout.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Logout.Draw(Bitmap);
end;
