{$DEFINE SRL_SILVERSCREEN_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSSilverScreenButton = (
    QUANTITY_1,
    QUANTITY_5,
    QUANTITY_10,
    QUANTITY_CUSTOM,
    QUANTITY_ALL
  );

  TRSSilverScreen = type TRSTitledInteface;

procedure TRSSilverScreen.Setup; override;
begin
  inherited;

  Self.Name := 'Silver Screen';
end;

procedure TRSSilverScreen.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@InterfaceArea.X1];
  Self.Alignment.Right := [@InterfaceArea.X2];
  Self.Alignment.Top := [@InterfaceArea.Y1];
  Self.Alignment.Bottom := [@InterfaceArea.Y2];
  Self.Alignment.Center.MaxWidth := 505;
  Self.Alignment.Center.MaxHeight := 323;
end;

function TRSSilverScreen.GetButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[37,37]]);
end;

function TRSSilverScreen.GetButton(Button: ERSSilverScreenButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if (Length(Buttons) = Length(ERSSilverScreenButton)) then
    Result := Buttons[Button];
end;

function TRSSilverScreen.GetItemBoxes: TBoxArray;
var Jewellery: TBoxArray;
begin
  Jewellery := Grid(3, 4, 79, 55, [5, 1], [Self.X1 + 10, Self.Y1 + 40]);
  Result := Jewellery.Combine(Grid(2, 4, 109, 55, [5, 1], [Self.X2 - 233, Self.Y1 + 40]));
end;

function TRSSilverScreen.IsOpen: Boolean; overload;
begin
  Result := Self.GetButton(ERSSilverScreenButton.QUANTITY_1).Visible();
end;

function TRSSilverScreen.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

function TRSSilverScreen.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSSilverScreen.SetQuantity(Amount: Int32): Boolean;
const
  ENABLED_COLOR = $FFFFFF;
  DISABLED_COLOR = 2070783;
var
  Text: String;
  Button: TRSButton;
  Buttons: TRSButtonArray;
begin
  if Amount = -1 then
    Text := 'All'
  else
    Text := ToString(Amount);

  Buttons := Self.GetButtons();

  for Button in Buttons do
  begin
    // Already selected
    if Button.FindText(Text, RS_FONT_PLAIN_11, ENABLED_COLOR) then
      Exit(True);
    // Select
    if Button.FindText(Text, RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click());
  end;

  for Button in Buttons do
    if Button.FindText('X', RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click() and Chat.AnswerQuery('Enter amount', ToString(Amount), 3000));
end;

function TRSSilverScreen.CanCraftItem(Item: TRSItem; out ItemBox: TBox): Boolean;
const
  ORANGE_COLOR = 2070783;
var
  Boxes: TBoxArray;
  TPA: TPointArray;
  Indices: TIntegerArray;
begin
  if not Self.IsOpen() then Exit;
  Boxes := Self.GetItemBoxes();

  Indices := ItemFinder.Find(Item, Boxes, 1);
  if Indices.Len < 1 then Exit;

  ItemBox := Boxes[Indices[0]];
  Result := SRL.FindColors(TPA, ORANGE_COLOR, ItemBox) > 0;
end;

function TRSSilverScreen.ClickItem(Item: TRSItem; Quantity: Int32): Boolean;
var
  Box: TBox;
begin
  if not Self.CanCraftItem(Item, Box) then Exit;

  Self.SetQuantity(Quantity);
  Mouse.Move(Box);
  Mouse.Click(MOUSE_LEFT);
  Result := True;
end;

procedure TRSSilverScreen.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxes(GetItemBoxes(), $00FFFF);
end;

var
  SilverScreen: TRSSilverScreen;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  SilverScreen.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  SilverScreen.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  SilverScreen.Draw(Bitmap);
end;
