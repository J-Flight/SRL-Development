
Inventory
=========
Methods to interact with the inventory.


------------

Inventory.PointToSlot
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSInventory.PointToSlot(P: TPoint): Int32;

Returns the inventory slot index which contains the TPoint `P`.
Returns -1 if the point does not fall in any slots.

Example
-------
.. code-block:: pascal  

  var P: TPoint;
  var Slot: Int32;

  P := Inventory.GetSlotBox(15).Middle; // Example point

  Slot := Inventory.PointToSlot(P);
  WriteLn(Slot); // 15


------------

Inventory.HoverSlot
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSInventory.HoverSlot(Slot: Int32): Boolean;

Moves the mouse over the slot. Slot is an Integer between 0 and 27.

Example
-------
.. code-block:: pascal  

  if Inventory.HoverSlot(1) then
    WriteLn('Mouse is now over slot #1');


------------

Inventory.ClickSlot
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSInventory.ClickSlot(Slot: Int32; Option: String = ''): Boolean;

Moves the mouse and clicks on the slot. Slot is an Integer between 0 and 27.

If option is empty the slot is left clicked. Else a right click is performed
and the option is selected from the choose option menu.

Example
-------
.. code-block:: pascal  

  if Inventory.ClickSlot(1) then
    WriteLn('Left clicked slot #1');
    
  if Inventory.ClickSlot(1, 'Drop') then
    WriteLn('Right clicked and selected "Drop" on slot #1', 'Drop');  


------------

Inventory.IsSlotSelected
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSInventory.IsSlotSelected(Slot: Int32): Boolean;

Returns True if the slot is selected (white outline).

Example
-------
.. code-block:: pascal  

  if Inventory.IsSlotSelected(1) then
    WriteLn('Slot 1 is selected!');


------------

Inventory.GetSelectedSlot
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSInventory.GetSelectedSlot: Int32;

Returns the index of the selected slot (white outline).
**-1** is returned if no slot is selected.

Example
-------
.. code-block:: pascal  

  WriteLn(Inventory.GetSelectedSlot());


------------

Inventory.SetSelectedSlot
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSInventory.SetSelectedSlot(Slot: Int32): Boolean;

Set the slot as selected (white outline).
Slot can be **-1** to unselect the currently selected slot.

Example
-------
.. code-block:: pascal  

  WriteLn(Inventory.GetSelectedSlot());


------------

Inventory.Use
~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSInventory.Use(Slot, OtherSlot: Int32): Boolean;

Selects **Slot** and uses with **OtherSlot**.

Example
-------
.. code-block:: pascal  

  Inventory.Use(1, 5); // Use item in slot 1 on Item in slot 5


------------

Inventory.RandomSlotNearby
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSInventory.RandomSlotNearby(Slot: Int32; Slots: TIntegerArray): Int32;

Randomly returns one of the **Slots** weighted towards **Slot** by distance.

Example
-------
.. code-block:: pascal  

  var Slot: Int32;

  Slot := Inventory.RandomSlotNearby(0, [0..27]);
  WriteLn('This slot is likely nearby slot 0');
  WriteLn(Slot);


------------

Inventory.ShiftDrop
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TRSInventory.ShiftDrop(Items: TStringArray; Pattern: TIntegerArray): Boolean;

Shift drops items following the desired pattern.

Example
-------
.. code-block:: pascal  

  // Shift drop maple & willow logs in the snake pattern
  Inventory.ShiftDrop(['Maple logs', 'Willow logs'], DROP_PATTERN_SNAKE);


------------
